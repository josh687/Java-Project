Index: src/main/ui/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\n\n\nimport model.NumberGame;\n\npublic class Main {\n    public static void main(String[] args) {\n        MemoryApp mem = new MemoryApp();\n\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/Main.java b/src/main/ui/Main.java
--- a/src/main/ui/Main.java	(revision d0dcdd494cfeefb11114fc8532e8dff59c0c4ef2)
+++ b/src/main/ui/Main.java	(date 1738109691659)
@@ -5,7 +5,7 @@
 
 public class Main {
     public static void main(String[] args) {
-        MemoryApp mem = new MemoryApp();
+        GameUI mem = new GameUI();
 
 
     }
Index: src/main/ui/Tab.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui.tab;\n\nimport ui.MemoryApp;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic abstract class Tab extends JPanel {\n    private final MemoryApp controller;\n\n    //REQUIRES: SmartHomeUI controller that holds this tab\n    public Tab(MemoryApp controller) {\n        this.controller = controller;\n    }\n\n    //EFFECTS: creates and returns row with button included\n    public JPanel formatButtonRow(JButton b) {\n        JPanel p = new JPanel();\n        p.setLayout(new FlowLayout());\n        p.add(b);\n\n        return p;\n    }\n\n    //EFFECTS: returns the SmartHomeUI controller for this tab\n    public MemoryApp getController() {\n        return controller;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/Tab.java b/src/main/ui/Tab.java
--- a/src/main/ui/Tab.java	(revision d0dcdd494cfeefb11114fc8532e8dff59c0c4ef2)
+++ b/src/main/ui/Tab.java	(date 1738110070057)
@@ -1,15 +1,17 @@
-package ui.tab;
+package ui;
 
-import ui.MemoryApp;
+import ui.GameUI;
 
 import javax.swing.*;
 import java.awt.*;
+import java.awt.event.WindowListener;
 
 public abstract class Tab extends JPanel {
-    private final MemoryApp controller;
+
+    private final GameUI controller;
 
     //REQUIRES: SmartHomeUI controller that holds this tab
-    public Tab(MemoryApp controller) {
+    public Tab(GameUI controller) {
         this.controller = controller;
     }
 
@@ -23,7 +25,9 @@
     }
 
     //EFFECTS: returns the SmartHomeUI controller for this tab
-    public MemoryApp getController() {
+    public GameUI getController() {
         return controller;
     }
+
+
 }
\ No newline at end of file
Index: src/main/ui/HomeTab.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/HomeTab.java b/src/main/ui/HomeTab.java
new file mode 100644
--- /dev/null	(date 1738109691659)
+++ b/src/main/ui/HomeTab.java	(date 1738109691659)
@@ -0,0 +1,77 @@
+package ui;
+
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+
+
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+
+public class HomeTab extends Tab {
+
+
+    private JLabel greeting;
+
+    //EFFECTS: constructs a home tab for console with buttons and a greeting
+    public HomeTab(GameUI controller) {
+        super(controller);
+
+        setLayout(new GridLayout(3, 1));
+
+        placeGreeting();
+        placeHomeButtons();
+//        placeStatusButton();
+    }
+
+    //EFFECTS: creates greeting at top of console
+    private void placeGreeting() {
+        greeting = new JLabel("Welcome", JLabel.CENTER);
+        greeting.setSize(WIDTH, HEIGHT / 3);
+        this.add(greeting);
+    }
+
+    //EFFECTS: creates Arrive and Leave buttons that change greeting message when clicked
+    private void placeHomeButtons() {
+        JButton b1 = new JButton("Play Game");
+        JButton b2 = new JButton("GoToProfiles");
+
+        JPanel buttonRow = formatButtonRow(b1);
+        buttonRow.add(b2);
+        buttonRow.setSize(WIDTH, HEIGHT / 6);
+
+        b1.addActionListener(e -> {
+            getController().getTabbedPane().setSelectedIndex(GameUI.GAMES_TAB_INDEX);
+
+        });
+
+        b2.addActionListener(e -> {
+            getController().getTabbedPane().setSelectedIndex(GameUI.PROFILES_TAB_INDEX);
+
+        });
+
+        this.add(buttonRow);
+    }
+
+//    //EFFECTS: constructs a status button that switches to the report tab on the console
+//    private void placeStatusButton() {
+//        JPanel statusBlock = new JPanel();
+//        JButton statusButton = new JButton(ButtonNames.GO_TO_REPORT.getValue());
+//        statusBlock.add(formatButtonRow(statusButton));
+//
+//        statusButton.addActionListener(new ActionListener() {
+//            @Override
+//            public void actionPerformed(ActionEvent e) {
+//                String buttonPressed = e.getActionCommand();
+//                if (buttonPressed.equals(ButtonNames.GO_TO_REPORT.getValue())) {
+//                    getController().getTabbedPane().setSelectedIndex(SmartHomeUI.REPORT_TAB_INDEX);
+//                }
+//            }
+//        })
+//
+//        this.add(statusBlock);
+//    }
+}
\ No newline at end of file
Index: src/main/ui/GameUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/GameUI.java b/src/main/ui/GameUI.java
new file mode 100644
--- /dev/null	(date 1738109691659)
+++ b/src/main/ui/GameUI.java	(date 1738109691659)
@@ -0,0 +1,96 @@
+package ui;
+
+import model.ListOfProfiles;
+
+import model.NumberGame;
+import model.TypingGame;
+import model.Profile;
+import persistence.JsonReader;
+import persistence.JsonWriter;
+
+import model.TypingGame;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.concurrent.TimeUnit;
+import java.util.ArrayList;
+import java.util.Scanner;
+
+
+import javax.swing.*;
+import java.util.Scanner;
+
+
+
+public class GameUI extends JFrame {
+    public static final int HOME_TAB_INDEX = 0;
+    public static final int GAMES_TAB_INDEX = 1;
+    public static final int PROFILES_TAB_INDEX = 2;
+
+    public static final int WIDTH = 600;
+    public static final int HEIGHT = 400;
+    private JTabbedPane sidebar;
+    private static final String JSON_STORE = "./data/workroom.json";
+    private NumberGame numgame;
+    private Scanner input;
+    private TypingGame typer;
+    private ListOfProfiles profiles;
+    private JsonWriter jsonWriter;
+    private JsonReader jsonReader;
+
+    //MODIFIES: this
+    //EFFECTS: creates SmartHomeUI, loads SmartHome appliances, displays sidebar and tabs
+    public GameUI() {
+        super("SmartHome Console");
+        setSize(WIDTH, HEIGHT);
+        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
+
+        profiles = new ListOfProfiles();
+        numgame = new NumberGame();
+        typer = new TypingGame();
+
+
+
+        sidebar = new JTabbedPane();
+        sidebar.setTabPlacement(JTabbedPane.LEFT);
+
+        loadTabs();
+        add(sidebar);
+
+        setVisible(true);
+    }
+
+    //EFFECTS: returns ListOfProfiles object controlled by this UI
+    public ListOfProfiles getListOfProfiles() {
+        return profiles;
+    }
+
+    public NumberGame getNumgame() {
+        return numgame;
+    }
+
+    public TypingGame getTypingGame() {
+        return typer;
+    }
+
+
+    //MODIFIES: this
+    //EFFECTS: adds home tab, settings tab and report tab to this UI
+    private void loadTabs() {
+        JPanel homeTab = new HomeTab(this);
+        JPanel gameTab = new GameTab(this);
+//        JPanel reportTab = new ProfilesTab(this);
+
+        sidebar.add(homeTab, HOME_TAB_INDEX);
+        sidebar.setTitleAt(HOME_TAB_INDEX, "Home");
+        sidebar.add(gameTab, GAMES_TAB_INDEX);
+        sidebar.setTitleAt(GAMES_TAB_INDEX, "Games");
+//        sidebar.add(reportTab, PROFILES_TAB_INDEX);
+//        sidebar.setTitleAt(PROFILES_TAB_INDEX, "Profiles");
+    }
+
+    //EFFECTS: returns sidebar of this UI
+    public JTabbedPane getTabbedPane() {
+        return sidebar;
+    }
+
+}
\ No newline at end of file
Index: src/main/ui/GameTab.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/GameTab.java b/src/main/ui/GameTab.java
new file mode 100644
--- /dev/null	(date 1738109691659)
+++ b/src/main/ui/GameTab.java	(date 1738109691659)
@@ -0,0 +1,280 @@
+package ui;
+
+import model.NumberGame;
+import model.TypingGame;
+
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+
+import model.ListOfProfiles;
+import model.NumberGame;
+import model.Profile;
+
+public class GameTab extends Tab {
+
+
+    private JLabel greeting;
+    private NumberGame numgame;
+    private TypingGame typer;
+    private JLabel gameout;
+    private JTextField input;
+    private JScrollPane yer;
+    private ListOfProfiles profiles;
+
+
+    //EFFECTS: constructs a home tab for console with buttons and a greeting
+    public GameTab(GameUI controller) {
+        super(controller);
+
+        numgame = new NumberGame();
+        typer = new TypingGame();
+
+
+        setLayout(new GridLayout(3, 1));
+
+
+        placeHomeButtons();
+    }
+
+    //EFFECTS: creates greeting at top of console
+
+
+    //EFFECTS: creates Arrive and Leave buttons that change greeting message when clicked
+    @SuppressWarnings("methodlength")
+    private void placeHomeButtons() {
+        JButton b1 = new JButton("Play NumberGame");
+        JButton b2 = new JButton("Play Typing Game");
+
+        JPanel buttonRow = formatButtonRow(b1);
+        buttonRow.add(b2);
+        buttonRow.setSize(WIDTH, HEIGHT / 6);
+        b1.setVisible(true);
+        b2.setVisible(true);
+        b1.setEnabled(true);
+        b2.setEnabled(true);
+
+        b1.addActionListener(e -> {
+            b1.setVisible(false);
+            b2.setVisible(false);
+            b1.setEnabled(false);
+            b2.setEnabled(false);
+
+            playNumberGame();
+
+
+        });
+
+        b2.addActionListener(e -> {
+            b1.setVisible(false);
+            b2.setVisible(false);
+            b1.setEnabled(false);
+            b2.setEnabled(false);
+
+            playTypingGame();
+
+        });
+
+        this.add(buttonRow);
+    }
+
+    @SuppressWarnings("methodlength")
+    public void playNumberGame() {
+        int rand = numgame.getNumForLevel();
+        gameout = new JLabel(String.valueOf(rand), JLabel.CENTER);
+        gameout.setSize(WIDTH, HEIGHT / 3);
+        this.add(gameout);
+
+        input = new JTextField(15);  // Create the JTextField
+
+        JButton submitButton = new JButton("Submit");  // Create a button to submit the input
+        submitButton.addActionListener(new ActionListener() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                int num = Integer.parseInt(input.getText());  // Read the value from the JTextField
+                if (num == rand) {
+                    numgame.nextLevel();
+                    removeAllPanels();
+                    Container parent = gameout.getParent();
+                    parent.remove(gameout);
+                    parent.validate();
+                    parent.repaint();
+                    playNumberGame();
+                } else {
+                    removeAllPanels();
+                    Container parent = gameout.getParent();
+                    parent.remove(gameout);
+                    parent.validate();
+                    parent.repaint();
+                    looseNumberGame();
+                    
+                }
+            }
+        });
+
+        JPanel inputPanel = new JPanel();  // Create a panel to hold the input components
+        inputPanel.add(new JLabel("Enter the number:"));
+        inputPanel.add(input);
+        inputPanel.add(submitButton);
+
+        this.add(inputPanel);
+          //  looseGameNumber();
+
+        //}
+    }
+
+    private void removeAllPanels() {
+        Component[] components = this.getComponents();
+        for (Component component : components) {
+            if (component instanceof JPanel) {
+                this.remove(component);
+            }
+        }
+        this.revalidate();
+        this.repaint();
+    }
+
+    @SuppressWarnings("methodlength")
+    public void looseNumberGame() {
+
+
+        input = new JTextField(15);  // Create the JTextField
+
+        JButton submitButton = new JButton("Submit");  // Create a button to submit the input
+        submitButton.addActionListener(new ActionListener() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                profiles = getController().getListOfProfiles();
+                String prof = (input.getText());
+                if (profiles.getProfPosition(prof) >= 0) {
+                    Profile profToAdd = profiles.get(profiles.getProfPosition(prof));
+                    profToAdd.addNumGame(numgame);
+                    profToAdd.newHighScoreNum(numgame.getLevel());
+                    numgame = new NumberGame();
+                    removeAllPanels();
+
+
+                } else {
+                    Profile profToAdd = new Profile(prof);
+                    profToAdd.addNumGame(numgame);
+                    profToAdd.newHighScoreNum(numgame.getLevel());
+                    profiles.add(profToAdd);
+                    removeAllPanels();
+
+                    numgame = new NumberGame();
+                    placeHomeButtons();
+                }
+            }
+        });
+
+        JPanel inputPanel = new JPanel();  // Create a panel to hold the input components
+        inputPanel.add(new JLabel("Enter the profile to add the game to"));
+        inputPanel.add(input);
+        inputPanel.add(submitButton);
+
+        this.add(inputPanel);
+        
+    }
+
+
+    @SuppressWarnings("methodlength")
+    public void playTypingGame() {
+        String rando = typer.getScentence();
+        gameout = new JLabel(rando, JLabel.CENTER);
+        gameout.setSize(WIDTH, HEIGHT / 3);
+        this.add(gameout);
+
+        input = new JTextField(15);  // Create the JTextField
+
+        JButton submitButton = new JButton("Submit");  // Create a button to submit the input
+        submitButton.addActionListener(new ActionListener() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                String in = (input.getText());  // Read the value from the JTextField
+                if (in.equals(rando)) {
+                    typer.nextLevel();
+                    removeAllPanels();
+                    Container parent = gameout.getParent();
+                    parent.remove(gameout);
+                    parent.validate();
+                    parent.repaint();
+                    playTypingGame();
+                } else {
+                    removeAllPanels();
+                    Container parent = gameout.getParent();
+                    parent.remove(gameout);
+                    parent.validate();
+                    parent.repaint();
+                    looseTypingGame();
+
+                }
+            }
+        });
+
+        JPanel inputPanel = new JPanel();  // Create a panel to hold the input components
+        inputPanel.add(new JLabel("Enter the number:"));
+        inputPanel.add(input);
+        inputPanel.add(submitButton);
+
+        this.add(inputPanel);
+        //  looseGameNumber();
+
+        //}
+    }
+
+
+
+    @SuppressWarnings("methodlength")
+    public void looseTypingGame() {
+
+
+        input = new JTextField(15);  // Create the JTextField
+
+        JButton submitButton = new JButton("Submit");  // Create a button to submit the input
+        submitButton.addActionListener(new ActionListener() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                profiles = getController().getListOfProfiles();
+                String prof = (input.getText());
+                if (profiles.getProfPosition(prof) >= 0) {
+                    Profile profToAdd = profiles.get(profiles.getProfPosition(prof));
+                    profToAdd.addTypeGame(typer);
+                    profToAdd.newHighScoreType(typer.getLevel());
+                    typer = new TypingGame();
+                    removeAllPanels();
+
+
+                } else {
+                    Profile profToAdd = new Profile(prof);
+                    profToAdd.addTypeGame(typer);
+                    profToAdd.newHighScoreType(typer.getLevel());
+                    profiles.add(profToAdd);
+                    removeAllPanels();
+
+                    typer = new TypingGame();
+                    placeHomeButtons();
+                }
+            }
+        });
+
+        JPanel inputPanel = new JPanel();  // Create a panel to hold the input components
+        inputPanel.add(new JLabel("Enter the profile to add the game to"));
+        inputPanel.add(input);
+        inputPanel.add(submitButton);
+
+        this.add(inputPanel);
+
+    }
+
+
+
+
+
+
+        
+
+
+
+
+}
\ No newline at end of file
diff --git a/src/main/ui/ProfilesTab.java b/src/main/ui/ProfilesTab.java
new file mode 100644
